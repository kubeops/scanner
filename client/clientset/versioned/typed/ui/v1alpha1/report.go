/*
Copyright AppsCode Inc. and Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeops.dev/scanner/apis/ui/v1alpha1"
	scheme "kubeops.dev/scanner/client/clientset/versioned/scheme"
)

// ReportsGetter has a method to return a ReportInterface.
// A group's client should implement this interface.
type ReportsGetter interface {
	Reports(namespace string) ReportInterface
}

// ReportInterface has methods to work with Report resources.
type ReportInterface interface {
	Create(ctx context.Context, report *v1alpha1.Report, opts v1.CreateOptions) (*v1alpha1.Report, error)
	ReportExpansion
}

// reports implements ReportInterface
type reports struct {
	client rest.Interface
	ns     string
}

// newReports returns a Reports
func newReports(c *UiV1alpha1Client, namespace string) *reports {
	return &reports{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Create takes the representation of a report and creates it.  Returns the server's representation of the report, and an error, if there is any.
func (c *reports) Create(ctx context.Context, report *v1alpha1.Report, opts v1.CreateOptions) (result *v1alpha1.Report, err error) {
	result = &v1alpha1.Report{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("reports").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(report).
		Do(ctx).
		Into(result)
	return
}
