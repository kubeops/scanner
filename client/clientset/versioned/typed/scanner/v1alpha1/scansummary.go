/*
Copyright AppsCode Inc. and Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kubeops.dev/scanner/apis/scanner/v1alpha1"
	scheme "kubeops.dev/scanner/client/clientset/versioned/scheme"
)

// ScanSummariesGetter has a method to return a ScanSummaryInterface.
// A group's client should implement this interface.
type ScanSummariesGetter interface {
	ScanSummaries() ScanSummaryInterface
}

// ScanSummaryInterface has methods to work with ScanSummary resources.
type ScanSummaryInterface interface {
	Create(ctx context.Context, scanSummary *v1alpha1.ScanSummary, opts v1.CreateOptions) (*v1alpha1.ScanSummary, error)
	ScanSummaryExpansion
}

// scanSummaries implements ScanSummaryInterface
type scanSummaries struct {
	client rest.Interface
}

// newScanSummaries returns a ScanSummaries
func newScanSummaries(c *ScannerV1alpha1Client) *scanSummaries {
	return &scanSummaries{
		client: c.RESTClient(),
	}
}

// Create takes the representation of a scanSummary and creates it.  Returns the server's representation of the scanSummary, and an error, if there is any.
func (c *scanSummaries) Create(ctx context.Context, scanSummary *v1alpha1.ScanSummary, opts v1.CreateOptions) (result *v1alpha1.ScanSummary, err error) {
	result = &v1alpha1.ScanSummary{}
	err = c.client.Post().
		Resource("scansummaries").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(scanSummary).
		Do(ctx).
		Into(result)
	return
}
